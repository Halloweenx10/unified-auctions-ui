kind: pipeline
type: kubernetes
name: core-lint-and-test

steps:
    - name: core-install
      image: node:16.9.1
      depends_on: [clone]
      commands:
          - cd core
          - npm ci

    - name: core-lint
      image: node:16.9.1
      depends_on: [core-install]
      commands:
          - cd core
          - npm run lint

    - name: core-build
      image: node:16.9.1
      depends_on: [core-install]
      commands:
        - cd core
        - npm run build

trigger:
    event:
        - pull_request

---
kind: pipeline
type: kubernetes
name: frontend-lint-and-test

steps:
    - name: frontend-install
      image: node:16.9.1
      depends_on: [clone]
      commands:
          - cd frontend
          - npm ci

    - name: frontend-lint
      image: node:16.9.1
      depends_on: [frontend-install]
      commands:
          - cd frontend
          - npm run lint

    - name: frontend-test
      image: node:16.9.1
      depends_on: [frontend-install]
      commands:
          - cd frontend
          - npm run test

    - name: frontend-build
      image: node:16.9.1
      depends_on: [frontend-test]
      commands:
        - cd frontend
        - npm run build

trigger:
    event:
        - pull_request
---
kind: pipeline
type: kubernetes
name: bot-twitter-lint-and-test

steps:
    - name: bot-twitter-install
      image: node:16.9.1
      depends_on: [clone]
      commands:
          - cd bot-twitter
          - npm ci

    - name: bot-twitter-lint
      image: node:16.9.1
      depends_on: [bot-twitter-install]
      commands:
          - cd bot-twitter
          - npm run lint

    - name: bot-twitter-build
      image: node:16.9.1
      depends_on: [bot-twitter-install]
      commands:
        - cd bot-twitter
        - npm run build

trigger:
    event:
        - pull_request

---
kind: pipeline
name: build-and-publish

trigger:
  # note: ignored for `tag` event
  branch:
  - main
  event:
  - push
  - tag

# Share docker socket for build steps
volumes:
  - name: dockersock
    host:
      path: /var/run/docker.sock
  - name: dockerconfig
    temp: {}

steps:
  - name: docker-registry-login
    image: sidestream/docker-in-docker-chamber:0.1.0
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
      - name: dockerconfig
        path: /root/.docker
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: "AWS_ACCESS_KEY_ID"
      AWS_SECRET_ACCESS_KEY:
        from_secret: "AWS_SECRET_ACCESS_KEY"
      AWS_DEFAULT_REGION: "eu-central-1"
    commands:
      # login to docker, credentials will be stored in `/root/.docker` folder, that is shared
      # as a volume with other steps
      - chamber read --quiet sidestream/drone-ci github_password | docker login https://ghcr.io --username sideborg --password-stdin

  - name: frontend-staging
    image: sidestream/docker-in-docker-chamber:0.1.0
    depends_on: [docker-registry-login]
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
      - name: dockerconfig
        path: /root/.docker
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: "AWS_ACCESS_KEY_ID"
      AWS_SECRET_ACCESS_KEY:
        from_secret: "AWS_SECRET_ACCESS_KEY"
      AWS_DEFAULT_REGION: "eu-central-1"
    commands:
      # declare cache source, the image tag to be created, secrets location to get build time variables from
      - export IMAGE_CACHE=ghcr.io/sidestream-tech/auction-ui/frontend:next
      - export IMAGE_AND_TAG=ghcr.io/sidestream-tech/auction-ui/frontend:${DRONE_TAG:-next}
      - export SECRET_LOCATION=auction-ui/staging
      # hydrate build-cache
      - docker pull $$IMAGE_CACHE
      # build and tag the new image
      - |
        export DOCKER_BUILDKIT=1
        docker build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg INFURA_PROJECT_ID=$(chamber read --quiet $$SECRET_LOCATION INFURA_PROJECT_ID) \
          --build-arg PRODUCTION_DOMAIN=$(chamber read --quiet $$SECRET_LOCATION PRODUCTION_DOMAIN) \
          --build-arg CONTACT_EMAIL=$(chamber read --quiet $$SECRET_LOCATION CONTACT_EMAIL) \
          --cache-from $$IMAGE_CACHE \
          --label org.opencontainers.image.source=https://github.com/sidestream-tech/auction-ui \
          -t $$IMAGE_AND_TAG \
          -f frontend/Dockerfile \
          .
      # publish the new image
      - docker push $$IMAGE_AND_TAG

  - name: frontend-makerdao
    image: sidestream/docker-in-docker-chamber:0.1.0
    depends_on: [docker-registry-login]
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
      - name: dockerconfig
        path: /root/.docker
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: "AWS_ACCESS_KEY_ID"
      AWS_SECRET_ACCESS_KEY:
        from_secret: "AWS_SECRET_ACCESS_KEY"
      AWS_DEFAULT_REGION: "eu-central-1"
    commands:
      # declare cache source, the image tag to be created, secrets location to get build time variables from
      - export IMAGE_CACHE=ghcr.io/sidestream-tech/auction-ui/frontend:next-makerdao
      - export IMAGE_AND_TAG=ghcr.io/sidestream-tech/auction-ui/frontend:${DRONE_TAG:-next}-makerdao
      - export SECRET_LOCATION=auction-ui/production
      # hydrate build-cache
      - docker pull $$IMAGE_CACHE
      # build and tag the new image
      - |
        export DOCKER_BUILDKIT=1
        docker build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg INFURA_PROJECT_ID=$(chamber read --quiet $$SECRET_LOCATION INFURA_PROJECT_ID) \
          --build-arg PRODUCTION_DOMAIN=$(chamber read --quiet $$SECRET_LOCATION PRODUCTION_DOMAIN) \
          --build-arg CONTACT_EMAIL=$(chamber read --quiet $$SECRET_LOCATION CONTACT_EMAIL) \
          --cache-from $$IMAGE_CACHE \
          --label org.opencontainers.image.source=https://github.com/sidestream-tech/auction-ui \
          -t $$IMAGE_AND_TAG \
          -f frontend/Dockerfile \
          .
      # publish the new image
      - docker push $$IMAGE_AND_TAG

  - name: bot-twitter
    image: sidestream/docker-in-docker-chamber:0.1.0
    depends_on: [docker-registry-login]
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
      - name: dockerconfig
        path: /root/.docker
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: "AWS_ACCESS_KEY_ID"
      AWS_SECRET_ACCESS_KEY:
        from_secret: "AWS_SECRET_ACCESS_KEY"
      AWS_DEFAULT_REGION: "eu-central-1"
    commands:
      # declare cache source and the image tag to be created
      - export IMAGE_CACHE=ghcr.io/sidestream-tech/auction-ui/bot-twitter:next
      - export IMAGE_AND_TAG=ghcr.io/sidestream-tech/auction-ui/bot-twitter:${DRONE_TAG:-next}
      # hydrate build-cache
      - docker pull $$IMAGE_CACHE
      # build and tag the new image
      - |
        export DOCKER_BUILDKIT=1
        docker build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from $$IMAGE_CACHE \
          --label org.opencontainers.image.source=https://github.com/sidestream-tech/auction-ui \
          -t $$IMAGE_AND_TAG \
          -f bot-twitter/Dockerfile \
          .
      # publish the new image
      - docker push $$IMAGE_AND_TAG
